---
title: "Tidying Data"
subtitle: "BODL R Training"
author: "Dr Stevie Pederson"
institute: "Black Ochre Data Labs<br>Telethon Kids Institute"
date: "2023-02-16"
date-format: long
title-slide-attributes:
    data-background-color: "#3c3c44"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [../custom.scss]
    code-line-numbers: false
    width: 1024
    height: 768
    sansfont: Times New Roman
    logo: assets/bodl_logo_white_background.jpg
---


```{r, loadPackages, echo = FALSE, include = FALSE}
knitr::opts_chunk$set(
  echo = TRUE, include = TRUE, warning = FALSE, message = FALSE, 
  out.width = 800, fig.align = "center",results = 'hide'
)
```

# Logical Tests {background-color="#3c3c44"}

## Logical Tests

- Before we start to dig too deep $\implies$ **Logical Tests**

. . .

- We also need another sneak peak at vectors

## The `c()` Function

- The `c()` function joins values together
- Commonly thought to stand for `combine` or `concatenate`

```{r}
c()
1:3
c(1, 2, 3)
x <- c(1:5, NA)
```

## Logical Tests 

::: {.incremental}

- Is Equal To: `==`
- Not equal: `!=`
- Or: `|`
- Less than: `<`
- Less than or equal: `<=`

:::

## Logical Tests

```{r, results='hide'}
x == 5
x != 5
x > 3
x > 3 | x == 2
is.na(x)
```

- `R` also recognises the symbol `&` for `AND`


# Data Manipulation {background-color="#3c3c44"}

## Data Manipulation

Also known as _data munging_

We'll cover:

- `SQL-` and `Excel-`like functions in `dplyr`
- Changing from wide to long form using `tidyr`
<!-- - Editing text using `stringr` -->

## Loading The Packages

```{r}
library(readr)
library(dplyr)
library(tidyr)
```

- The package `dplyr` works specifically with `data.frame` objects
- Works optimally with `tibble`-style data.frames

# The package `dplyr` {background-color="#3c3c44" background-image=https://swag.rstudio.com/uploads/1/3/1/3/131335021/s815253891256106552_p2_i4_w660.png background-size="60%" background-opacity="0.5"}

## Starting with `dplyr`

Data for this session

```{r load-transport}
transport <- read_csv(
  "data/transport.csv",
  comment = "#", col_names = FALSE, na = "-", col_types = "-ccnnc"
)
colnames(transport) <- c("gender", "name", "weight", "height", "method")
```

. . .

So we have a `r nrow(transport)` x `r ncol(transport)` `data frame`

```{r, results='hide'}
dim(transport)
nrow(transport)
ncol(transport)
```

## Starting with `dplyr::select()` 

- The function `select()` allows you to select columns by name
- The `tibble` must be given as the first argument

```{r}
select(transport, gender, name, weight)
```

Or by position

```{r}
select(transport, 1:3)
```

## Starting with `dplyr::select()` 

- We can also remove columns using the minus (`-`) sign

```{r}
select(transport, -2)
select(transport, -name)
```

__Discuss: Would removing by name or position by the best?__

## Starting with `dplyr::select()` 

The `select()` function has a few helper functions

- `starts_with()`, `ends_with()`, `contains()`, `one_of()`, `any_of()`, `all_of()` and `everything()`
- Provided in the package `tidyselect` (always loaded by `dplyr`)

```{r}
select(transport, ends_with("ght"))
select(transport, contains("t"))
```

## Starting with `dplyr::select()` 

__So far, we haven't changed the original object__

We can overwrite this anytime (sometimes we will by accident)

```{r}
transport <- select(transport, -name)
transport
```

Now we have removed the `name` column

## Starting with `dplyr::select()` 

- To get the column back, we need to reload the `.csv` file

```{r, echo=FALSE, eval = TRUE}
transport <- read_csv(
  "data/transport.csv",
  comment = "#", col_names = FALSE, na = "-", col_types = "-ccnnc"
)
colnames(transport) <- c("gender", "name", "weight", "height", "method")
```


## Using `dplyr::filter()` 

- We can use our logical tests to filter the data
- Again we need to specify the `tibble` as the first argument

```{r}
filter(transport, method == "car")
filter(transport, method == "car", gender == "female")
```

## Using `dplyr::arrange()` 

We can sort on one or more columns

```{r}
arrange(transport, weight)
arrange(transport, method, height)
```

We can change to descending order using `desc()`

```{r}
arrange(transport, desc(weight))
```

# Combining Functions {background-color="#3c3c44"}

## Combining Functions

- This is where `dplyr` steps up a gear
- We can chain functions together using `|>`
- This behaves like a `|` in the bash shell
- Introduced as `%>%` from the package `magrittr`
    + `|>` Added at R 4.2.0
    + Older code may contain `%>%`

Places the **output of the first function** as the **first argument** of the next function!

## Combining Functions

```{r}
filter(transport, method == "bike")
```

Is identical to 

```{r}
transport |> filter(method == "bike")
```

. . .

Now we can perform [multiple operations]{.underline}!

```{r}
transport |> filter(method == "bike") |> arrange(weight)
```

. . .

There is __no limit__ to the number of functions you can chain together

## For the technically minded

1. Each function in `dplyr` takes a `data.frame` as the first argument
2. Each function returns a `data.frame`

```{r}
transport |> filter(method == "bike") |> arrange(weight)
```


. . .

1. The `|>` placed `transport` into the first argument of `filter()`
2. The output of `filter()` was a `data.frame` $\implies$ this was placed as the first argument to `arrange()`


## Using `dplyr::mutate()`

We can add extra columns using `mutate()`

```{r}
transport |> mutate(height_m = height/100)
```

Once we've added a column, we can refer to it by name

```{r}
transport |> 
  mutate(
    height_m = height/100, 
    BMI = weight / height_m^2
  )
```

## Using `dplyr::mutate()`

We can also overwrite existing columns

```{r}
transport |> mutate(height = height/100)
```

__Have we changed the original__ `object` yet?

## Using `dplyr::rename()`

Can use the function `rename()`

```{r}
transport |> rename(height_cm = height)
```

Now we can get crazy

```{r}
transport |>
  rename(height_cm = height) |>
  mutate(height_m = height_cm/100, BMI = weight / height_m^2) |>
  filter(BMI > 25)
```

## Getting Summaries

We can get summaries for entire columns

```{r}
transport |> 
  summarise(mean(weight), mean(height))
```

## Getting Summaries

Let's remove that missing value:

```{r}
transport |>
  filter(!is.na(height)) |>
  summarise(mean(weight), mean(height))
```

## Getting Summaries

We can group categorical variables by their levels

```{r}
transport |>
  filter(!is.na(height)) |>
  group_by(gender) |>
  summarise(mean(weight), mean(height))
```


## Getting Group Summaries

Or combinations of levels

```{r}
transport |>
  filter(!is.na(height)) |>
  group_by(gender, method) |>
  summarise(mean(weight), mean(height))
```

We can use any function that spits out a single value

- `sd()`, `min()`, `median()`

## Getting Group Summaries

We could assign our own names to the columns

```{r}
transport |>
  filter(!is.na(height)) |>
  group_by(gender, method) |>
  summarise(
    mn_weight = mean(weight), 
    mn_height = mean(height)
  )
```

## Getting Group Summaries

And we can count how many entries we have using `n()`

```{r}
transport |>
  filter(!is.na(height)) |>
  group_by(gender, method) |>
  summarise(
    mn_weight = mean(weight), 
    mn_height = mean(height), 
    n = n()
  )
```

# Applying Functions Across Multiple Columns {background-color="#3c3c44"}

## Applying Functions Across Multiple Columns

- Use the helper function `across()`
- Can apply `starts_with()`, `ends_with()`, `contains()` syntax to select variables/columns
- Pass a function to the `.fns` argument
    
## Applying Functions Across Multiple Columns

```{r}
transport |>
  filter(!is.na(height)) |>
  group_by(gender, method) |>
  summarise(
    across(.cols = ends_with("ght"), .fns = mean)
  )
```

## Applying Multiple Functions

We can pass multiple functions to multiple columns

```{r}
transport |>
  filter(!is.na(height)) |>
  group_by(gender, method) |>
  summarise(
    n = n(),
    across(ends_with("ght"), .fns = c(mn = mean, sd = sd))
  )
```

## Applying Multiple Functions

We can also pass function arguments

```{r}
transport |>
  group_by(gender, method) |>
  summarise(
    n = n(),
    across(ends_with("ght"), .fns = c(mn = mean, sd = sd), na.rm = TRUE)
  )
```

## Using `dplyr::case_when()`

Kalen just had her height measured and she is 158.1cm. That missing value can be fixed!!!

```{r}
transport |>
  mutate(
    height = case_when(
      name == "Kalen" ~ 158.1,
      name != "Kalen" ~ height
    )
  )
```

. . .

- `case_when()` is like `if_else()` but allows for multiple options
- Executes conditions sequentially

```{r, eval = FALSE}
case_when(
  direction > 0 & p < 0.05 ~ "Up",
  direction < 0 & p < 0.05 ~ "Down",
  p >= 0.05 ~ "Unchanged"
)
```



## Using `dplyr::case_when()`

Let's overwrite that initial object

```{r}
transport <- transport |>
  mutate(
    height = case_when(
      name == "Kalen" ~ 158.1,
      name != "Kalen" ~ height
    )
  )
```

**What would happen if we accidentally ran this again?**

# Combining Data Frames {background-color="#3c3c44"}

## Combining Data Frames

`dplyr` has some very useful functions for combining `data.frame` objects

- `bind_rows()`, `left_join()`, `right_join()` and `full_join()`

Amazingly, we've just had data from `Tony` and he's a 83kg car-driver, who is 177.3cm tall.

- We can manually create a `tibble` just for him

## Combining Data Frames

```{r}
tony <- tibble(
  gender = "male",
  name = "Tony",
  weight = 83,
  height = 177.3,
  method = "car"
)
```

We can add his data using `bind_rows()`

```{r}
bind_rows(tony, transport)
```


## Combining Data Frames

1. Download the object `contacts.csv` to your data folder
2. Load the contact numbers in the file `contacts.csv`

```{r}
contacts <- read_csv("data/contacts.csv", col_types = "cc")
dim(contacts)
dim(transport)
glimpse(contacts)
```


## Combining Data Frames {.build}

**Do these objects look compatible?**

- Some may be missing in one of the objects
- The values in the `name` column look similar
- In a different order

**How do we combine these?**    

## `dplyr::left_join()`

We can use the first `data_frame` as the template

```{r}
left_join(transport, contacts, by = "name")
```

- Any `name` entries missing from the second object (`contacts`) will become a missing value in the column `contact`
- Any `name` entries in the first which have multiple matches in the second will be expanded

## `dplyr::right_join()`

We can use the second object as the template

```{r}
right_join(transport, contacts, by = "name")
```

Any missing from the first object (`data`) will become a row of missing values where missing

```{r}
right_join(transport, contacts, by = "name") |> tail()
```


## `dplyr::full_join()`

Or we can combine everything

```{r}
full_join(transport, contacts, by = "name")
```

Will be missing values in both directions

```{r}
full_join(transport, contacts, by = "name") |> filter(is.na(gender))
full_join(transport, contacts, by = "name") |> filter(is.na(contact))
```


# Reshaping your data {background-color="#3c3c44" background-image=https://tidyr.tidyverse.org/logo.png background-size="50%" background-opacity="0.5"}

## Reshaping your data

- This dataset is in what we refer to as `wide` form
- We have a row of measurements for each individual
- The information is _structured around the individual_

In `long` form, the information is _structured around the measurement_

## Reshaping your data | From Wide to Long

```{r}
timeCourse <- read_csv("data/timeCourse.csv")
timeCourse
```

This is a time course:

- Measuring log-change in GFP intensity
- Two treatments (`Tx`) A & B 
- Also have identifier column: `Mouse`

## From Wide to Long

The basic function is `pivot_longer()`

- Part of the package `tidyr`
- Key arguments are:
    - `cols`: which columns are shifting to long form
    - `names_to`: What shall we call the column with the old column names
    - `values_to`: What shall we call the column with the values
    
## From Wide to Long

```{r}
timeCourse |>
  pivot_longer(
    cols = starts_with("day"),
    names_to = "Day",
    values_to = "logFC"
  )
```

Many functions require data to be in this format

## From Wide to Long

__How could we get means for each treatment/day from the original data?__

 . . .

```{r}
timeCourse |>
  pivot_longer(
    cols = starts_with("day"), names_to = "Day", values_to = "logFC"
  ) |>
  group_by(Tx, Day) |>
  summarise(mn_change = mean(logFC))
```

. . .

__Can we add the standard deviation?__

## From Wide to Long

__Can we add the standard deviation?__

 . . .

```{r}
timeCourse |>
  pivot_longer(
    cols = starts_with("day"), names_to = "Day", values_to = "logFC"
  ) |>
  group_by(Tx, Day) |>
  summarise(across(all_of("logFC"), .fns = c(mn = mean, sd = sd)))
```

## From Long To Wide

- We can also take our data from long to wide form
- Key arguments are `names_from` and `values_from`
- Often have to deal with missing values in this context

```{r}
transport |>
  mutate(status = 1) |>
  pivot_wider(
    names_from = "method", values_from = "status"
  )
```


## From Long To Wide

- We can also take our data from long to wide form
- Key arguments are `names_from` and `values_from`
- Often have to deal with missing values in this context

```{r}
transport |>
  mutate(status = 1) |>
  pivot_wider(
    names_from = "method", values_from = "status", values_fill = 0
  )
```


## Combining and Separating Columns

There really is no end to the possible situations we find

```{r}
pcr <- read_csv("data/PCR.csv")
pcr
```

. . .

Here, both treatment and timepoint are in the column name

## Combining and Separating Columns

Let's transform using pivot longer

```{r}
pcr |>
  pivot_longer(cols = ends_with("hr"), names_to = "group", values_to = "Ct")
```

. . .

We need to separate the original column names: `separate()`

```{r}
pcr |>
  pivot_longer(cols = ends_with("hr"), names_to = "group", values_to = "Ct") |>
  separate(
    col = "group", into = c("Treat", "Timepoint")
  )
```

. . .

- The separator was set by default to be any non-alpha-numeric symbol
- This is a pattern known as a *regular expression*

## Combining and Separating Columns

The reverse operation is `unite()`

```{r}
transport |>
  unite(
    col = "group", all_of(c("gender", "method")), sep = "-"
  )
```

. . .

We can also perform this, retaining the original column

```{r}
transport |>
  unite(
    col = "group", all_of(c("gender", "method")), sep = "-",
    remove = FALSE
  )
```

# The `tidyverse` {background-color="#3c3c44" background-image=https://tidyverse.tidyverse.org/logo.png background-size="50%" background-opacity="0.5"}

## The `tidyverse`

- The packages `dplyr`, `tidyr` and `readr` are used in most workflows
- Additional near-essential packages: `ggplot2` and `forcats`
- All can be loaded with `library(tidyverse)`
    + A few less obvious packages like `purrr` are also loaded
    
. . .

Nearly **all** my analyses start with `library(tidyverse)`

## Saving Data

- We'll be using `transport` later today
- Please save your edited version (i.e. without missing values)

```{r, eval = FALSE}
write_csv(
  x, # This is where your R object goes
  file, # This is where to save it on your HDD
  na = "NA",
  append = FALSE,
  col_names = !append,
  quote = c("needed", "all", "none"),
  escape = c("double", "backslash", "none"),
  eol = "\n",
  num_threads = readr_threads(),
  progress = show_progress(),
  path = deprecated(),
  quote_escape = deprecated()
)
```

## Saving Data

- We'll be using `transport` later today
- Please save your edited version (i.e. without missing values)

```{r}
write_csv(transport, "data/transport_clean.csv")
```


# Some Final Words {background-color="#3c3c44"}

## Conflicting Function Names

- Many functions in `dplyr` were inspired by SQL
    + Some function names have been used by multiple packages
    + `select()` and `filter()` are most heavily used
- If a weird error occurs, add the package name before the function
    + `dplyr::select()` or `dplyr::filter()`
    + I [always]{.underline} do this for both as a habit
    
. . .
    
```{r, eval = TRUE, echo = TRUE, warning=TRUE, error=TRUE, include=TRUE}
library(GO.db)
transport |> select(gender)
transport |> dplyr::select(gender) |> glimpse()
```



