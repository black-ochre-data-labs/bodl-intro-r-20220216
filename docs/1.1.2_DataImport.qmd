---
title: "Data Import In R"
subtitle: "BODL R Training"
author: "Dr Stevie Pederson"
institute: "Black Ochre Data Labs<br>Telethon Kids Institute"
date: "2023-02-16"
date-format: long
title-slide-attributes:
    data-background-color: "#3c3c44"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [../custom.scss]
    code-line-numbers: false
    width: 1024
    height: 768
    sansfont: Times New Roman
    logo: assets/bodl_logo_white_background.jpg
---

```{r, loadPackages, echo = FALSE, include = FALSE}
knitr::opts_chunk$set(
  echo = TRUE, include = TRUE, 
  warning = FALSE, message = FALSE, 
  out.width = 800, fig.align = "center"
)
```


# Getting Data Into R {background-color="#3c3c44"}

## Setting Up For Today

- Before we start playing with data, we'll need some core packages
- Packages are a collection of functions which enable a set of tasks

. . .

In RStudio

1. `Tools` > `Install Packages`
2. Type the words `tidyverse`, `rmarkdown` and `pander` in the `Packages` Field
3. Press `Enter` without modifying any of the defaults

. . .

This may run for a few minutes

## Importing Data

- A point of confusion for many learning `R` are the __Error Messages__
    - We often see them while we're loading data
    - Some are actually helpful messages
- A knowledge of data types is beneficial when using `R`
    - `logical`, `integer`, `numeric`, `character`
- We can load `xlsx`, `xls`, `csv`, `txt`, files + many more


## Importing Data

- Things we do to make it "look nice" in Excel can create problems:
    - Blank rows are not fatal, just annoying
    - Mixtures of numbers and text in a column
    - Deleted cells are sometimes imported as blank rows/columns
    - Cell formatting will be ignored by R
    - Plots will also be ignored
    
## Importing Data

First let's get the data for this exercise.

- In your R project, create the folder `data` using the `New Folder` icon
- Save the file `toothData.csv` into this folder
- Open it with Excel just to have a look at it 

## Importing Data

- This is actually the type of format `R` loves to see
- Plain text with comma delimiters
- Simple column structure, with column names
- No blank rows at the top or separating sub-tables
- No blank columns

## Previewing in RStudio

1. Close Excel (**don't save/overwrite the file**)
2. Using the `Files` tab, enter the `data` directory
3. Click on `toothData.csv` 
4. Select `View File`

This will open a preview in the Script Window (close when you're done)

## Before We Go On

1. `File` > `New File` > `R Script` (Or `Ctrl+Shift+N`)
2. Save as `DataImport.R`


# Import Using the GUI {background-color="#3c3c44"}

## Using the GUI To Load Data {.smaller}

Click on the file and choose `Import Dataset`


```{r, echo=FALSE, out.width=800}
knitr::include_graphics("assets/importGUI.png")
```

<p style="text-align: center;">(Click `Update` if you don't see this)</p>

## The Preview Window

```{r, echo=FALSE, out.width='900mm', fig.align='center'}
knitr::include_graphics("assets/importGUI_preview.png")
```

## The Preview Window

```{r, echo=FALSE, out.width='900mm', fig.align='center'}
knitr::include_graphics("assets/importGUI_code.png")
```

## The Preview Window

1. Select and copy all the code in the `Code Preview` Box
2. Click `Import`
3. Magic happens...
    + Ignore the red/blue text. This is just 'helpful' information
    
. . . 

**Paste the copied code into your script**

## What has just happened? 

The code we copied has 3 lines:

```1. library(readr)```

- This package contains the function `read_csv()`
    
## What has just happened? 

The code we copied has 3 lines:

1. library(readr)
2. `toothData <- read_csv("data/toothData.csv")`

- This line loads the data into your `R Environment`
- It created an object named `toothData` by using the file name.
    
## What has just happened?

```{r, echo=FALSE, out.width='950mm', fig.align='center'}
knitr::include_graphics("assets/importGUI_name.png")
```

## What has just happened?

1. `library(readr)`
2. `toothData <- read_csv("data/toothData.csv")`
3. `View(toothData)`
    + Opens a preview in a familiar `Excel-like` format
    + I **never** use this

Close the preview by clicking the cross and delete `View(toothData)`
    
## What has just happened?

- We have just loaded data using the default settings of `read_csv()`
    + The object `toothData` is in our `R Environment`
    + The original file remains on our HDD **without modification**!!!
- Now we've saved the code in our script, **we don't need the GUI for this operation again!**

## Let's Demonstrate

1. In the `Environment Tab` click the broom icon (![](assets/broom.png))
    + This will delete everything from your `R Environment`
    + It won't unload the packages
2. Select the code we've just pasted and send it to the console
    + (Reloading the packages won't hurt)
3. Check the `Environment Tab` again and `toothData` is back


## A Brief Side Note

- `RStudio` now uses `read_csv()` from the package `readr` by default
- Old scripts will often use `read.csv()` from the package `utils`
- The newer version is slightly faster and fails less
- It also gives informative messages
- Other functions in `utils` are `read.delim()` and `read.table()`
- `readr` has the functions `read_tsv()`, `read_delim()` and `read_table()` etc.


## Data Frame Objects

- The object `toothData` is known as a `data.frame`
- `R` equivalent to a spreadsheet
- `readr` uses a variant called a `tbl_df` or `tibble` 
    + Like a `data.frame` with pretty bows & ribbons
    + Similar to a SQL table
    + Can only have row numbers for row names

. . .

<br>

```{r, eval = FALSE}
as.data.frame(toothData)
```



## Data Frame Objects

- Some additional ways to inspect this are:

```{r, eval=FALSE}
toothData
print(toothData)
head(toothData)
glimpse(toothData)
```

**What were the differences between each method?**

## Data Frame Objects

- Each column is a vector
    + **Must contain data of the same type**
- We can access each column by typing the column name after a `$`

```{r,eval=FALSE}
toothData$len
```

(We'll come back to this more tomorrow)

<!-- ## Data Frame Objects -->

<!-- - We can grab columns and rows using square brackets `[]` -->

<!-- ```{r,eval=FALSE} -->
<!-- toothData[1:3, "len"] -->
<!-- ``` -->

<!-- - The `tibble` versions of `data.frame`s can only have row numbers for the rownames -->
<!-- - All `data.frame`/`tibble` objects must have column names. -->

## Understanding `read_csv()`

- In the above we called the `R` function `read_csv()`
- Check the help page

```{r, eval = FALSE}
?read_csv
```

- We have four functions but stick to `read_csv()`

## Understanding `read_csv()` 

```{r, eval=FALSE}
read_csv(
  file,
  col_names = TRUE, col_types = NULL, col_select = NULL,
  id = NULL, locale = default_locale(), 
  na = c("", "NA"), quoted_na = TRUE,
  quote = "\"", comment = "",
  trim_ws = TRUE,
  skip = 0, n_max = Inf,
  guess_max = min(1000, n_max),
  name_repair = "unique",
  num_threads = readr_threads(),
  progress = show_progress(),
  show_col_types = should_show_types(),
  skip_empty_rows = TRUE,
  lazy = should_read_lazy()
)
```

- This function has numerous *arguments* (`file`, `col_names` etc.)
- Most have 'default' values given
- If only the argument name is given(e.g. `file`) **we need to specify something**

## Understanding `read_csv()` 

```{r, eval=FALSE}
read_csv(
  file,
  col_names = TRUE, col_types = NULL, col_select = NULL,
  id = NULL, locale = default_locale(), 
  na = c("", "NA"), quoted_na = TRUE,
  quote = "\"", comment = "",
  trim_ws = TRUE,
  skip = 0, n_max = Inf,
  guess_max = min(1000, n_max),
  name_repair = "unique",
  num_threads = readr_threads(),
  progress = show_progress(),
  show_col_types = should_show_types(),
  skip_empty_rows = TRUE,
  lazy = should_read_lazy()
)
```

- If specifying in order, we don't need to name arguments

. . .

`toothData <- read_csv("data/toothData.csv")` 

is identical to  

`toothData <- read_csv(file = "data/toothData.csv")`

## Understanding `read_csv()`

All `arguments` for the function were defined somewhere in the GUI.

1. Open the GUI Preview by clicking on the file again
2. Uncheck the `First Row as Names` checkbox

![](assets/importGUI.png){width="60%"}

## Understanding `read_csv()`

All `arguments` for the function were defined somewhere in the GUI.

1. Open the GUI Preview by clicking on the file again
2. Uncheck the `First Row as Names` checkbox
    + *What happened to the code?*
    + *How did the columns change?*
    
. . . 

Try clicking/unclicking a few more & try understand the consequences

## Understanding `read_csv()`

__What if the first three lines were comments starting with `#`?__

- It could be the same, or we can specify the comment symbol

```{r, eval=FALSE}
toothData <- read_csv("data/toothData.csv", comment = "#")
```

## Reading Help Pages: Bonus Slide

- The bottom three functions are simplified wrappers to `read_delim()`
- `read_csv()` calls `read_delim()` using `delim = ","`
- `read_csv2()` calls `read_delim()` using `delim = ";"`
- `read_tsv()` calls `read_delim()` using `delim = "\t"`

<br>
__What function would we call for *space-delimited* files?__

## Loading Excel Files

`R` also has a package for loading `.xls` and `xlsx` files.

```{r}
library(readxl)
```

The main function is `read_excel()`

```{r, eval=FALSE}
?read_excel
```

# Advanced Material {background-color="#3c3c44"}

::: {.notes}
Judge how we're going for time, but we should be right to do this before the break
:::

## Setup

If you've started a new session since last time:

```{r}
library(readr)
```


## What if the data we have isn't nice?

- Missing values might be given a value (e.g. 9999, "NA")
- Column names might be missing
- File may have comments
- Irrelevant columns
- May be structural errors in the file (Different column numbers)
- White-space in cells

## What if the data we have isn't nice?

- Download the dataset `transport.csv` to your `data` folder
- Navigate to the file in your `Files` pane
- Click on the file and choose `View File`

**What problems do we face here?**

```{r, echo=FALSE}
knitr::opts_chunk$set(eval = FALSE)
```

## What if the data we have isn't nice? 

**What problems do we face here?**

1. A comment in the first line
2. No column names
3. Missing data encoded as "-" in the 4^th^ line
4. A redundant column

## What if the data we have isn't nice? 

Let's try writing code for this instead of using the GUI

**This will fail**

```{r}
transport <- read_csv("data/transport.csv")
```

- `R` uses the first row to guess how many columns there are
- The comment is indicating 1 column

## Removing Comments

- We can tell `R` to ignore any lines beginning with `#`
- Set the comment argument using `comment = "#"`

```{r}
transport <- read_csv("data/transport.csv", comment = "#")
transport
```

Now `R` is guessing the correct number of columns $\implies$ the file will load

**What does all that red (or blue) stuff mean?**

## Data without column names

- `R` has assumed the first row contains column names
- We can tell `R` to ignore these using: `col_names = FALSE`

```{r}
transport <- read_csv(
  "data/transport.csv", comment = "#", col_names = FALSE
)
transport
```

**What has `R` used for column names?** 

## Missing Data

**What impact has the missing data in `X5` had?**

- We can correctly assign missing data as `NA` (`na = "-"`)

```{r}
transport <- read_csv(
  "data/transport.csv", comment = "#", col_names = FALSE, na = "-"
)
transport
```

## Ignoring Columns

```{r, echo=FALSE}
knitr::opts_chunk$set(eval = TRUE)
```

- We can also use the code `-` to skip a column
- We can leave `R` to guess any remaining columns using `?`
- Use the `col_types` argument: `col_types = "-?????"`

```{r, results='hide'}
transport <- read_csv(
  "data/transport.csv", comment = "#", col_names = FALSE, na = "-",
  col_types = "-?????"
)
transport
```

## Specifying Columns

- Or we can specify the exact type of data in each column
- Numeric columns can be specified as `n`
- Text or `character` columns can be specified as `c`

```{r}
transport <- read_csv(
  "data/transport.csv", comment = "#", col_names = FALSE, na = "-", 
  col_types = "-ccnnc"
)
transport
```

## Specifying Columns

- Let's accidentally **get the final column wrong** (use `n` instead of `c`)

```{r,eval=FALSE}
transport <- read_csv(
  "data/transport.csv", comment = "#", col_names = FALSE, na = "-",
  col_types = "-ccnnn"
)
transport
```

**NB: No warning will be given if a numeric column contains non-numeric characters**


## Specifying Columns

Let's change that back to the correct code:

```{r}
transport <- read_csv(
  "data/transport.csv", comment = "#", col_names = FALSE, na = "-", 
  col_types = "-ccnnc"
)
transport
```

## Setting Column Names

- My fix is to supply a `vector` of names

```{r}
myNames <- c(
  "X1", "gender", "name", "weight", "height", "method"
  )
transport <- read_csv(
  "data/transport.csv", 
  comment = "#", col_names = myNames, na = "-", 
  col_types = "-ccnnc"
)
transport
```


## The `c()` function

The most common function in `R` is `c()`

- This stands for `combine`
- Combines all values into a single `R` object, or `vector`
- If left empty, it is equivalent to `NULL`

```{r, results='markup'}
c()
```

## The `c()` function

- I have used this to create a vector of column names 
- Used the assignment operator `<-` to assign this vector

**What would happen if I gave too many or too few names?**

- We need to be careful here...

## Exporting Data

After we've edited a file, we might also wish to export it

```{r, eval=FALSE}
?write_csv
```

- This is a wrapper for `write_delim()`
- Can export `.csv`, `.txt`, `.tsv` etc.
- Individual `R` objects can be exported using `write_rds()`

## Exporting Data

The best way to export this is:

```{r}
write_csv(transport, "data/transport_clean.csv")
```

