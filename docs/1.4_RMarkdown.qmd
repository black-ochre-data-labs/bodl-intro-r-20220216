---
title: "R Markdown"
subtitle: "BODL R Training"
author: "Dr Stevie Pederson"
institute: "Black Ochre Data Labs<br>Telethon Kids Institute"
date: "2023-02-16"
date-format: long
title-slide-attributes:
    data-background-color: "#3c3c44"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [../custom.scss]
    code-line-numbers: false
    width: 1024
    height: 768
    sansfont: Times New Roman
    logo: assets/bodl_logo_white_background.jpg
---

```{r setup, echo = FALSE, include = FALSE}
if (interactive()) setwd(here::here("docs"))
knitr::opts_chunk$set(
  echo = TRUE, include = TRUE, warning = FALSE, message = FALSE, 
  fig.align = "center", results = 'hide', fig.show = "asis",
  fig.width = 6
)
```

# R Markdown {background-color="#3c3c44" background-image=https://raw.githubusercontent.com/rstudio/rmarkdown/main/man/figures/logo.png background-size="40%" background-opacity="0.5"}

## Writing Reports Using `rmarkdown`

* `rmarkdown` is a cohesive way to
    + Load & wrangle data 
    + Analyse data, including figures & tables
    + Publish everything in a complete report/analysis
* Everything is one document
    + Our analysis code embedded alongside our results
* The package `knitr` is the engine behind this
    + Replaced the `Sweave` package about 8-10 years ago
    
. . .

Extends the `markdown` language **to incorporate R code**

## A Brief Primer on Markdown

- Markdown is a very simple and elegant way to create formatted HTML
    + Text is entered as plain text
    + Formatting usually doesn't appear on screen ([but **can**]{.underline})
    + The parsing to HTML often occurs using `pandoc`
- Often used for Project README files etc.
- Not R-specific but is general across data-science

::: {.fragment}

1. Go to the File drop-down menu in RStudio
2. New File -> Markdown File
3. Save As `README.md`

:::

## Editing Markdown

- Section Headers are denoted by on or more `#` symbols
    + `#` is the highest level, `##` is next highest etc.

. . .

- Italic text is set by surrounding text in asterisks (`*`) or underscores (`_`)

. . .

- Bold text is set by using *two asterisks* (`**`) or *two underscores* )`__`

. . .

- Dot-point Lists are started by prefixing each line with `-`
    + Next level indents are formed by adding 2 or 4 spaces before the next `-`

. . .

- Numeric Lists are formed by starting a line with `1.`
    + Subsequent lines don't need to be numbered in order
    + Lower level values work as above
    
## Editing Markdown

Let's quickly edit our file so there's something informative

. . .

Enter this on the top line

`# BODL R Training, Feb 16-17 2020`

. . .

Two lines down add this

`## Day 1`

. . .

Leave another blank line then add

`1. Introduction to R and R Studio`  
`2. Data Manipulation`  
`3. Data Visualisation`  
`4. R Markdown`  

## Editing Markdown

Underneath the list enter:

`**All material**` can be found at \[the main github repository\]\(https://github.com/black-ochre-data-labs/bodl-intro-r-20220216\)

. . .

- Here we've set the first two words to appear in bold font
- The section in the square brackets will appear as text with a hyperlink to the site in the round brackets

. . .

- Click the `Preview Button` and an HTML document appears
- Note that README.html has also been produced 
    + Sites like github/gitlab render this automatically
    + Obsidian also renders interactively

# R Markdown {background-color="#3c3c44" background-image=https://raw.githubusercontent.com/rstudio/rmarkdown/main/man/figures/logo.png background-size="40%" background-opacity="0.5"}

## Writing Reports Using `rmarkdown`

We can output our analysis directly as:

* HTML
* MS Word Documents
* PDF Documents (If you have $\LaTeX$ installed)
* Slidy, `ioslides` or PowerPoint presentations

We never need to use MS Word, Excel or PowerPoint again!

## Writing Reports Using `rmarkdown`

- The file suffix is `.Rmd`
- Include markdown *alongside embedded `R` code.*
- Create all of our figures & tables directly from the data
- Data, experimental and analytic descriptions
- Mathematical/Statistical equations
- Nicely Formatted Results
- Any other information: citations, hyperlinks etc.

## Creating an *R* Markdown document

Let's create our first `rmarkdown` document

1. Go to the `File` drop-down menu in RStudio
2. New File -> R Markdown...

::: {.fragment}

![](assets/NewRMarkdown.png)

:::


## Creating an *R* Markdown document

1. Change the Title to: My First Report
2. Change the Author to *your preferred name*
3. Leave everything else as it is & hit OK
4. Save the file as `RMarkdownTutorial.Rmd`

## Looking At The File

A *header section* is contained between the `---` lines at the top

- __Nothing can be placed before this!__
- Uses YAML (**Y**AML **A**in't **M**arkup **L**anguage)
- Editing is beyond the scope of this course
- Can set custom `.css` files, load LaTeX packages, set parameters etc.

## Looking At The File

Lines 8 to 10 are a code `chunk`

- Chunks always begin with ```{r}
- Chunks always end with ```
- Executed `R` code goes between these two delineation marks
- Chunk names are optional and directly follow the letter `r`
    + Chunks can also be other languages (`bash`, `python` etc.)
    + Here the `r` tells RMarkdown the chunk is an `R` chunk
- Other parameters are set in the chunk header, e.g. do we show/hide the code

## Looking At The File

Line 12 is a Subsection Heading, starting with `##`

- Click the _Outline_ symbol in the top-right of the Script Window to open the _document outline_ 
- Chunk names are shown in _italics_ (if set to be shown)
    + `Tools` > `Global Options` > `R Markdown` 
    + Show in document outline: Sections and All Chunks
- Section Names in plain text
- Chunks are indented within Sections
- By default Sections start with `##`
    + Only the Document Title should be Level 1 `#`

## Getting Help

Check the help for a guide to the syntax.

`Help > Markdown Quick Reference`

- Increasing numbers of `#` gives Section `->` Subsection `->` Subsubsection etc.
- **Bold** is set by \*\*Knit\*\* (or \_\_Knit\_\_)
- *Italics* can be set using a single asterisk/underline: \*Italics\* or \_Italics\_
- `Typewriter font` is set using a single back-tick \`Typewriter\`


## Compiling The Report

The default format is an `html_document` & we can change this later.
Generate the default document by clicking `Knit`


## Compiling The Report

The Viewer Pane will appear with the compiled report (probably)

- Note the hyperlink to the RMarkdown website & the bold typeface for the word **Knit**
- The *R* code and the results are printed for `summary(cars)`
- The plot of `temperature` Vs. `pressure` has been embedded
- The code for the plot was hidden using `echo = FALSE`

## Compiling The Report
    
- We could also export this as an MS Word document by clicking the small 'down' arrow next to the word Knit.
- By default, this will be Read-Only, but can be helpful for sharing with collaborators.
- Saving as a `.PDF` may require an installation of $\LaTeX$, so we'll ignore that for now.

# Making Our Own Report {background-color="#3c3c44"}

## Making Our Own Report

Now we can modify the code to create our own analysis.

- Delete everything in your R Markdown file EXCEPT the header
- We'll analyse the `transport` dataset
- Edit the title to be something suitable

## Making Our Own Reports

What do we need for our report?

- Load and describe the data using clear text explanations
    + Maybe include the questions being asked by the study
- Create figures which show any patterns, trends or issues
- Perform an analysis
- State conclusions
- Send to collaborators

## Making Our Own Reports

- First we'll need to load the data
    + Then we can describe the data
- RMarkdown *always* compiles from the directory it is in
    + File paths should be relative to this
    
. . .

- My "first" real chunk always loads the packages we need

## Creating a Code Chunk

```{r load-tidyverse, echo=FALSE}
library(tidyverse)
```


- `Alt+Ctrl+I` creates a new chunk on Windows/Linux
    + `Cmd+Option+I` on OSX

. . .

- Type `load-packages` next to the  \`\`\`{r  
    + This is the chunk name
    + Really helpful habit to form
    
. . .

- Enter `library(tidyverse)` in the chunk body
    + We'll add other packages as we go

. . .

*Knit...*

## Dealing With Messages

- The `tidyverse` is a little too helpful sometimes
    + These messages look horrible in a final report
    + Are telling us which packages/version `tidyverse` has loaded
    + Also informing us of conflicts (e.g. `dplyr::filter` Vs. `stats::filter`)
    + Can be helpful when running an interactive session
- We can hide these from our report

## Dealing With Messages

1. Go to the top of your file (below the YAML)
2. Create a new chunk
3. Name it `setup`
4. Place a comma after `setup` and add `include = FALSE`
    + This will hide the chunk from the report

. . .

4. In the chunk body add `knitr::opts_chunk$set(message = FALSE)`
    + This sets a global parameter for all chunks
    + i.e. Don't print "helpful" messages

. . .

*Knit...*

## Making Our Own Reports


- I like to load all data straight after loading packages
- Gets the entire workflow sorted at the beginning
- Alerts to any problems early

. . .

Below the `load-packages` chunk:

- Create a new chunk
- Name it `load-data`
- In the chunk body load `transport` using `read_csv()`

. . .

```{r load-data}
transport <- read_csv("data/transport_clean.csv")
```


::: {.notes}
Chunks can be run interactively using `Ctrl+Alt+Shift+P`
:::

## Describing Data

Now let's add a section header for our analysis to start the report

1. Type `## Data Description` after the header and after leaving a blank line
2. Use your own words to describe the data
    + Consider things like how many participants, different methods, measures we have etc.

. . .


> 32 study participants were included, measuring their weight and height, as well as their gender and which transportation method they used to travel to and from work. The two transportation methods were *bike* and *car*.


## Describing Data

- In my version, I mentioned the study size
- We can **take this directly** from the data
    + Very useful as participants change
- `nrow(transport)` would give us the number of participants

. . .

Replace the number 32 in your description with  \``r` `nrow(transport)`\`

*Knit...*

## Describing Data

Next we might like a data summary giving group totals

```{r data-summary, results='markup'}
#| output-location: column-fragment
transport |>
  group_by(gender, method) |>
  summarise(n = n(), .groups = "drop")
```

. . .

- This doesn't look great $\implies$ the package `pander`

## Creating Summary Tables

- Add the following to your `load-packages` chunk

```{r load-pander}
library(pander)
```

. . .

- Now we can send to output to the function `pander()`

```{r data-summary-pander, results='markup'}
#| output-location: column-fragment
transport |>
  group_by(gender, method) |>
  summarise(n = n(), .groups = "drop") |>
  pander()
```

## Creating Summary Tables

- `pander()` has a `caption = ""` argument
- We can also set the column alignment using `justify = ""`

```{r data-summary-pander-args, results='markup'}
#| output-location: column-fragment
transport |>
  group_by(gender, method) |>
  summarise(n = n(), .groups = "drop") |>
  pander(
    justify = "llr",
    caption = "Summary of study design"
  )
```

## Creating Summary Tables

- Multiple other packages exist for table creation
    + All do some things brilliantly, none does everything
- `pander` is a good all-rounder
    + Tables are very simplistic
    + Also enables easy in-line results
- `reactable` creates amazing looking tables
    + A bit difficult to download the table data
- `DT` also creates fantastic tables
    + Less flexible with formatting
    + Allows simple downloading to `csv`, `xls` etc.
- `gt` is popular with some
- `xtable` is excellent for $\LaTeX$ output

## Additional Features of `pander`

- `pander` also allows for easy addition of in-line text
- The following will return only the *unique* values in a column

```{r col-unique}
unique(transport$method)
```

- Wrapping this in `pander()` will return formatted markdown

. . .

In your description, change:

- "transportation methods were *bike* and *car*." 

to

- "transportation methods were \``r` `pander(unique(transport$method))`\`."

## Adding Plots

- For this dataset, weight or BMI would be the response variable
    + method, gender and height would be the predictors
- What plots would be informative?

. . .

1. Weight Vs. Height separated by gender
2. BMI by transportation method & gender

## Adding Plots

1. Create a new chunk
2. Set the chunk name as as `plot-weight-vs-height`

```{r plot-weight-vs-height, eval = FALSE}
transport |>
  ggplot(aes(height, weight)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, formula = y ~ x) +
  facet_wrap(~gender, scales = "free") +
  labs(x = "Height (cm)", y = "Weight (kg)") +
  theme_bw() 
```

::: {.notes}
Maybe mention `ggpmisc::stat_poly_eq(use_label("eq"))`
:::

## Figure Captions

- Each chunk header can take multiple arguments
- `fig.cap = ""` allows for specification of a figure caption

```{r plot-weight-vs-height-fig-cap, fig.cap = "*Relationship between weight and height for male and female study participants. A strong linear trend was clearly evident*", results='asis'}
#| output-location: column-fragment
transport |>
  ggplot(aes(height, weight)) +
  geom_point() +
  geom_smooth(
    method = "lm", se = FALSE, formula = y ~ x
  ) +
  facet_wrap(~gender, scales = "free") +
  labs(x = "Height (cm)", y = "Weight (kg)") +
  theme_bw() 
```

## Other Chunk Options

- Other options include:
    + `fig.width`, `fig.height`, `fig.show`, `fig.align` etc.
    + `echo`: Setting to `FALSE` will hide the chunk
    + `eval`: Setting to `FALSE` will prevent evaluation of the chunk
    + `results`: Can control hiding or formatting of chunk output
    + `warning`: Show/hide warnings in the output
    + `message`: Show/hide messages in the output
    + `cache`: Setting a cached chunk will only evaluate it once, then reload

. . .

- As we saw earlier settings can be made globally
    + Individual settings will then over-ride global settings
    
## Other Chunk Options

- Here's my `setup` chunk for this presentation

```r
knitr::opts_chunk$set(
  echo = TRUE, include = TRUE, warning = FALSE, message = FALSE, 
  fig.align = "center", results = 'hide', fig.show = "asis",
  fig.width = 6
)
```

. . .

- When you've seen my results, I've set `results = 'asis'` in that chunk header

. . .

- A complete list is available at [https://yihui.org/knitr/options/](https://yihui.org/knitr/options/)

## A Challenge

1. Add BMI to the data
    + Can be done 'on-the-fly' by piping
    + The formula is $\text{BMI} = \frac{\text{weight}}{\text{height}^2}$ (kg/m^2^)
2. Create a boxplot of BMI
    + Place `gender` on the x-axis
    + Fill by `method`
3. Customise the plot
    + Set your own colour palette
    + Set your own axis labels etc.

## My Solution

```{r boxplot-bmi, fig.cap = "*BMI for male and female participants, separated by transportation method*"}
#| output-location: column-fragment
transport %>% 
  mutate(BMI = weight / (0.01*height)^2) %>% 
  ggplot(
    aes(gender, BMI)
  ) +
  geom_boxplot(aes( fill = method)) +
  geom_label(
    aes(label = my_label),
    data = . %>% 
      group_by(gender) %>% 
      summarise(
        n = n(), BMI = max(BMI)
      ) %>% 
      mutate(
        BMI = max(BMI),
        my_label = paste("n =", n)
      ),
    nudge_y = 0.2
  ) +
  scale_fill_manual(
    values = c("forestgreen", "grey")
  ) +
  labs(x = "Gender") +
  theme_bw()
```


## Statistical Analysis

- The most obvious analysis: BMI depends on the transport method
    + Gender will obviously be a fixed effect with a separate intercept
    + Assume the slope is the same

. . .

- Using `R` formula syntax:
    + `BMI ~ gender + method`
- We'll discuss in more detail tomorrow

## Statistical Analysis

- When using `%>%` as the pipe, the piped object can be referred to as `.`
    + When using `|>` this becomes `_`
- Here we'll just sent the results straight to `pander()`

```{r fit-bmi, results='markup'}
#| output-location: fragment
transport %>% 
  mutate(BMI = weight / (0.01*height)^2) %>% 
  lm(BMI ~ gender + method, data = .) %>% 
  pander()
```

## Complete the Analysis

- Describe the statistical question and the results
- Now we have a (relatively) complete report

. . .

- All code was executed within a single R session
- It compiles $\implies$ **Completely Reproducible**
- All code is visible and the analysis is transparent


## Complete the Analysis

After you're happy with the way your analysis looks

- A good habit is to finish with a section called `Session Info`
- Add a code chunk which calls the *R* command `sessionInfo()`

So far we've been compiling everything as HTML, but let's switch to an MS Word document.
We could email this to our collaborators, or upload to Google docs

## Summary

This basic process is incredibly useful

- We never need to cut & paste anything between R and other documents
- Every piece of information comes directly from our *R* analysis
- We can very easily incorporate new data as it arrives
- Source data is never modified
- Creates *reproducible research*
- Highly compatible with collaborative analysis & version control (Git)

## Advanced Options

- The `R` package `workflowr` is very helpful for larger workflows
    + Can include multiple HTML pages
    + Strong integration with `git`
- Highly customisable output
    + Code folding
    + Bootstrap themes etc.
    + Can use custom `css` files 
    + Interactive plots using `shiny`
