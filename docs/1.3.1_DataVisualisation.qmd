---
title: "Data Visualisation"
subtitle: "BODL R Training"
author: "Dr Stevie Pederson"
institute: "Black Ochre Data Labs<br>Telethon Kids Institute"
date: "2023-02-16"
date-format: long
title-slide-attributes:
    data-background-color: "#3c3c44"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [../custom.scss]
    code-line-numbers: false
    width: 1024
    height: 768
    sansfont: Times New Roman
    logo: assets/bodl_logo_white_background.jpg
---

```{r setup, echo = FALSE, include = FALSE}
if (interactive()) setwd(here::here("docs"))
knitr::opts_chunk$set(
  echo = TRUE, include = TRUE, warning = FALSE, message = FALSE, 
  fig.align = "center", results = 'hide', fig.show = "asis",
  fig.width = 6
)
```

# Data Visualisation {background-color="#3c3c44"}

## Session Setup

1. Start a new R Script called: `DataVisualisation.R`
2. Add the following two lines and execute them

```{r load-data}
library(tidyverse)
transport <- read_csv("data/transport_clean.csv")
```

. . .

- `library(tidyverse)`will load all packages from the last session
- `ggplot2` will also be loaded

## Base Plotting

R has many generic plotting functions inbuilt:

- Line/Scatter plots: `plot()`
- Histograms: `hist()`
- Boxplots: `boxplot()`

. . .

- They're usually ugly & unfriendly to use
- Can be handy for a quick & dirty plot

## Scatterplots

A simple scatter plot needs x & y co-ordinates

```{r base-plot, eval=FALSE}
plot(transport$height, transport$weight)
```

## Histograms

For a histogram, we only need values which can be *binned*

```{r base-hist, eval=FALSE}
hist(transport$height)
```

. . .

Checkout the p-values!!!

```{r plot-p-hist, fig.width=8}
not_sig <- runif(1e6) # Randomly make a million values from U(0, 1)
sig <- rbeta(1e5, 1, 50) # Add 100,000 from a skewed distribution
p <- c(not_sig, sig)
hist(p, breaks = 100, main = "P-Values") # Plot using 100 bins, i.e. every 0.01
abline(v = 0.05, col = "red") # Add our significance threshold
```


## Boxplots

A boxplot will plot the range of values across different categories

- We can use the *formula syntax* from `R`
- The `~` symbol usually means *"depends on"*
    - i.e. Plot the values of height as they depend on gender

```{r base-boxplot, eval=FALSE}
boxplot(height ~ gender, data = transport)
```

# Using `ggplot2` {background-color="#3c3c44" background-image=https://ggplot2.tidyverse.org/logo.png background-size="40%" background-opacity="0.5"}

## The package `ggplot2`

- `ggplot2` gives much more flexibility and power
    - Is part of the core `tidyverse`
- Has unique syntax and approach
- We add layers of plotting information like geometry, colours, themes etc

## The package `ggplot2`

- `ggplot2` gives much more flexibility and power
    - Is part of the core `tidyverse`
- Has unique syntax and approach
- We add layers of plotting information like geometry, colours, themes etc

- Based on the book: The Grammar of Graphics^[*Wilkinson, L* "The Grammar of Graphics", Springer New York, 2005]

![](https://m.media-amazon.com/images/I/61L6t6eXkGL._AC_UF700,800_QL80_.jpg){width="17%"}

## Calling `ggplot()`

The main function is `ggplot()` [(The package is `ggplot2`)]{.fragment .fade-in}

. . .

- In this first stage we set the plotting aesthetics using `aes()`
- Defines what is plotted on which axis, what defines the colour/shape etc.
- No data will be plotted. We get the plot area only

```{r plot-blank-area}
#| output-location: column-fragment
ggplot(transport, aes(x = weight, y = height))
```


## Adding A Geometry Layer


After defining the overall aesthetics, we

- Tell R "more is to come" by adding '`+`' at the end of the line
- Add the geometry using various `geom_*()` functions


```{r plot-transport-raw}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height)) +
  geom_point()
```


## Global Aesthetics

::: {.notes}
Don't forget to show people the help page
:::

- There are numerous aesthetics available for `geom_point()`
- Start with colouring points by the transport method

```{r plot-transport-add-colour}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height, colour = method)) +
  geom_point()
```

## Global Aesthetics

- Now set the shape of each point by the gender of our study participants

```{r plot-transport-add-shape}
#| output-location: fragment
ggplot(
  transport, 
  aes(x = weight, y = height, colour = method, shape = gender)
) +
  geom_point()
```


## Fixed Aesthetics

- Top-level aesthetics (`ggplot(aes(...))`) are passed down through layers
- Aesthetics can be set to respond to variables (i.e. columns)
- Can *also be provided as fixed values* $\implies$ specific to a layer

```{r plot-transport-add-size}
#| output-location: column-fragment
ggplot(
  transport, 
  aes(
    x = weight, y = height, 
    colour = method, shape = gender
  )
) +
  geom_point(size = 4)
```


## Aesthetics and Layers

- Variable aesthetics *can also be restricted to a layer*

```{r no-plot-transport-aes-to-geom, eval = FALSE}
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(
    aes(colour = method, shape = gender),
    size = 4
  )
```

. . .

- This will look identical to the previous plot
    + Colour & Shape will not be passed to any other layers
    + Next, we'll add more layers


## Adding Multiple Layers

- `geom_smooth()` will add a line of best fit, with standard error
- This defaults to a `loess` fit

```{r plot-transport-add-loess}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth()
```

## Adding Multiple Layers

- We can manually specify `lm` and hide the standard errors
- The *formula syntax* says `y` *depends on* `x`

```{r plot-transport-with-lm}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE)
```


## Adding Multiple Layers

- `colour = method` in the global `aes()` produces two lines

```{r plot-transport-with-lm2}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height, colour = method)) +
  geom_point(aes(shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE)
```

## Being Careful With Aesthetics

- `colour = method` in the global `aes()` produces two lines

```{r no-plot-transport-with-lm2, eval=FALSE}
ggplot(transport, aes(x = weight, y = height, colour = method)) +
  geom_point(aes(shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE)
```

- `geom_line()` has no *shape* aesthetic
- If we'd also left `shape` assigned in the initial call
    + Lines would also be grouped by gender
    + Grouped lines would still have the same type of line
    + Could add a `linetype` or `linewidth` aesthetic
        +  This looks terrible


## Adding labels

Point labels can be added using `geom_text()`

```{r plot-transport-labels, fig.width=7, fig.height=6}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE) +
  geom_text(aes(label= name)) 
```

## Adding labels

`ggrepel::geom_text_repel()` is a good alternative

```{r plot-transport-label-repel, fig.height=5.4, fig.width=6.3}
#| output-location: fragment
library(ggrepel) # Place this line at the top of your script
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE) +
  geom_text_repel(aes(label= name)) 
```


## The package `ggplot2`: labels

Axis and legend labels can be modified using `labs()`

```{r plot-transport-axis-labels, fig.width=6.4, fig.height=5.5}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE) +
  geom_text_repel(aes(label= name)) +
  labs(x = "Weight (kg)", y = "Height (cm)", shape = "Gender", colour = "Transport")
```

::: {.notes}
Mention that this can be risky and that renaming columns may be better if possible
:::

# Using facets {background-color="#3c3c44"}

## Saving as an Object

- Our code is starting to get a bit long for my screen
- We can save a `ggplot2` plot as an `R` object 

```{r save-object}
p <- ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE) +
  geom_text_repel(aes(label= name)) +
  labs(x = "Weight (kg)", y = "Height (cm)", shape = "Gender", colour = "Transport")
```

. . .

- Note that no plot will be produced
    + Typing the object name (`p`) will generate the figure
- We can still continue adding layers and modifying

## Using facets

- The ability to break a plot into *facets* is an incredibly useful feature

```{r plot-transport-facet-wrap, fig.width=8}
#| output-location: fragment
p +
  facet_wrap(~gender) 
```

## Using facets

- We can set separate scales using `scales = "free"`
   + Or `"free_x"`, `"free_y"`

```{r plot-transport-facet-scales, fig.width=8}
#| output-location: fragment
p +
  facet_wrap(~gender, scales = "free") 
```

## Using facets

- An alternative is `facet_grid()` 
- We use the `y ~ x` syntax to specify the x/y groupings

```{r plot-transpor-facet-grid}
#| output-location: fragment
p +
  facet_grid(method ~ gender, scales = "free") 
```

# Different geoms {background-color="#3c3c44"}

## Common geoms 

```{r call-help, eval=FALSE}
?geom_
```


::: {.incremental}
- `geom_boxplot()`, `geom_violin()`
- `geom_bar()`, `geom_col()`, `geom_histogram()`
  + `geom_errobar()`, `geom_errorbarh()`
- `geom_line()`, `geom_density()`
- `geom_rect()`, `geom_raster()`
- `geom_hline()`, `geom_vline()`, `geom_abline()`, `geom_segment()`
- `geom_text()`, `geom_label()`
:::

## Boxplots

```{r boxplot-transport}
#| output-location: fragment
ggplot(transport, aes(x = gender, y =height)) +
  geom_boxplot()
```

## Boxplots

Adding fill or colour variables will group within the x-variable

```{r boxplot-transport-fill}
#| output-location: fragment
ggplot(transport, aes(x = gender, y =height, fill = method)) +
  geom_boxplot()
```

. . .

Can be easily combined with facets for clear visualisations

::: {.notes}
Try to switch in `geom_violin()`
:::

## Histograms

- Histograms look horrible with the default settings


```{r hist-transport}
#| output-location: fragment
ggplot(transport, aes(height)) +
  geom_histogram()
```

## Histograms

- Manually setting `fill`, `colour` and `binwidth` really helps

```{r hist-transport-manual}
#| output-location: fragment
ggplot(transport, aes(height)) +
  geom_histogram(fill = "grey70", colour = "black", binwidth = 5)
```

## Histograms

- The syntax to switch to a frequency instead of count

```{r hist-transport-freq}
#| output-location: fragment
ggplot(transport, aes(height, after_stat(density))) +
  geom_histogram(fill = "grey70", colour = "black", binwidth = 5)
```


## Bar/Column Charts

- Two variants:
    + `geom_col()` and `geom_bar()`
- Both can produce the same plot with enough tweaking
- Both stack values by default
- By default 
    + `geom_bar()` counts values by groupings
    + `geom_col()` plots the data as provided 
- If we summarise in advance: `geom_col()`
   + This is my preferred option
   + I retain control over the data (trust no-one, not even yourself)

## Bar/Column Charts

- Manually summarising for stacked bars
- **Note that now we're piping the data in!**

```{r plot-transport-geom-col}
#| output-location: fragment
transport |>
  group_by(method, gender) |>
  summarise(count = n(), .groups = "drop") |> 
  ggplot(aes(method, count, fill = gender))+
  geom_col()
```


## Bar/Column Charts

- This is identical to the default for `geom_bar()`

```{r plot-transport-geom-bar}
#| output-location: fragment
transport |>
  ggplot(aes(method, fill = gender))+
  geom_bar()
```


## Bar/Column Charts

- Manually summarising for 'dodged' bars
- The same can be applied for `geom_bar()`

```{r plot-transport-geom-col-dodge}
#| output-location: fragment
transport |>
  group_by(method, gender) |>
  summarise(count = n(), .groups = "drop") |>
  ggplot(aes(method, count, fill = gender))+
  geom_col(position = "dodge")
```

## Adding Error Bars

- Instead of counting, let's summarise values for *height* by gender

```{r plot-transport-height}
#| output-location: column-fragment
transport |>
  group_by(gender) |>
  summarise(
    mn_height = mean(height)
  ) |>
  ggplot(
    aes(gender, mn_height, fill = gender)
  ) +
  geom_col(position = "dodge")
```

## Adding Error Bars

- Now we can add error bars by calculating $\hat{\sigma}$

```{r plot-transport-height-err}
#| output-location: column-fragment
transport |>
  group_by(gender) |>
  summarise(
    mn_height = mean(height), 
    sd_height = sd(height)
  ) |>
  ggplot(aes(gender, mn_height, fill = gender)) +
  geom_col(position = "dodge") +
  geom_errorbar(
    aes(
      ymin = mn_height - sd_height, 
      ymax = mn_height + sd_height
    ),
    width = 0.4
  )
```

## Challenge

- Repeat the previous using weight instead of height
- Include the transport method as facets

## Density Plots

```{r plot-transport-density}
#| output-location: column-fragment
transport |>
  ggplot(aes(height, colour = gender)) +
  geom_density(
    fill = "grey70", alpha = 0.5, 
    linewidth = 1
  ) 
```

## Axis Intercepts

```{r plot-transport-density-vline}
#| output-location: column-fragment
transport %>% 
  ggplot(aes(height, colour = gender)) +
  geom_density(
    fill = "grey70", alpha = 0.5, 
    linewidth = 1
  ) +
  geom_vline(
    aes(xintercept = mn, colour = gender),
    ## Take note of this amazing trick
    ## We need to use the %>% approach to piping here
    data = . %>% 
      group_by(gender) %>% 
      summarise(mn = mean(height))
  )
```

::: {.notes}
- Discuss the usage of `.` in piping
- Seems like only `%>%` can handle the `.` in this way
:::

## Heatmaps

- Need multiple measures
- Let's reload that PCR time course

```{r load-pcr, results='markup'}
#| output-location: fragment
pcr <- read_csv("data/PCR.csv") |> 
  pivot_longer(cols = ends_with("hr"), names_to = "group", values_to = "Ct") |> 
  separate(group, into = c("Treat", "Time"))
glimpse(pcr)
```

## Heatmaps

- `geom_raster()` can be used for plotting even grids

```{r heatmap-pcr}
#| output-location: fragment
pcr |> 
  ggplot(aes(Treat, Time, fill = Ct)) +
  geom_raster() +
  facet_wrap(~Gene)
```

# Scales {background-color="#3c3c44"}

## Modifying Scales

- Up until now we've accepted the default colours
- We can modify all colours and axes using scales

. . .

- `scale_x_continuous()`, `scale_y_continuous()`
- `scale_x_discrete()`, `scale_y_discrete()`
- `scale_fill_continuous()`, `scale_fill_discrete()`, `scale_fill_manual()`
- `scale_colour_continuous()`, `scale_colour_discrete()`, `scale_colour_manual()`
- `scale_alpha_*()` + many, many more

## Expanding Axes

- `expansion()` takes two vectors
    + The first is multiplicative
    + The second is additive

```{r barplot-transport-expansion}
#| output-location: column-fragment
transport |>
  ggplot(
    aes(method, fill = gender)
  ) +
  geom_bar(position = "dodge") +
  scale_y_continuous(
    # Expand the lower limit by 0%
    # and the upper limit by 5%
    expand = expansion(c(0, 0.05))
  )
```

## Changing the Colours

- We can manually set colours using `scale_fill_manual()`
    + Can be named if you choose

```{r barplot-transport-colours}
#| output-location: column-fragment
transport |>
  ggplot(
    aes(method, fill = gender)
  ) +
  geom_bar(position = "dodge") +
  scale_y_continuous(
    expand = expansion(c(0, 0.05))
  ) +
  scale_fill_manual(
    values = c("blue", "red")
  )
```

## Changing the Colours

- `scale_fill_brewer()` has a series of defined palettes

```{r show-palettes, eval=FALSE}
RColorBrewer::display.brewer.all()
```


## Changing the Colours

```{r barplot-transport-set1}
#| output-location: column-fragment
transport |>
  ggplot(
    aes(method, fill = gender)
  ) +
  geom_bar(position = "dodge") +
  scale_y_continuous(
    expand = expansion(c(0, 0.05))
  ) +
  scale_fill_brewer(palette = "Set1")
```

## Changing the Colours

- The `viridis` palettes are colour-blind friendly
- Also excellent at showing changes in the middle of the range

```{r barplot-transport-viridis}
#| output-location: column-fragment
transport |>
  ggplot(
    aes(method, fill = gender)
  ) +
  geom_bar(position = "dodge") +
  scale_y_continuous(
    expand = expansion(c(0, 0.05))
  ) +
  scale_fill_viridis_d(option = "cividis")
```

## Manually Defining Palettes {.smaller}

- All `r length(colours())` available colours can be seen by typing `colours()`
- `hcl.colors()` also has a series of predefined palettes

```{r list-pals, results='markup'}
hcl.pals()
```

. . .

- Colours can also be specified as RGB, e.g. "#3C3C44"
    + Can also use the `rgb()` function


## Manually Defining Palettes

- I often spend ages on this

```{r barplot-transport-hcl}
#| output-location: column-fragment
cols <- hcl.colors(2, "Berlin")
transport |>
  ggplot(
    aes(method, fill = gender)
  ) +
  geom_bar(position = "dodge") +
  scale_y_continuous(
    expand = expansion(c(0, 0.05))
  ) +
  scale_fill_manual(
    values = cols
  )
```

## Heatmaps

- Heatmaps usually have continuous values
- We'll also need to tidy those axes
- Alternatives are `scale_fill_gradient()`, `scale_fill_gradient2()`, `scale_fill_gradientn()`

```{r heatmap-pcr-viridis}
#| output-location: column-fragment
pcr |> 
  ggplot(aes(Treat, Time, fill = Ct)) +
  geom_raster() +
  facet_wrap(~Gene) +
  scale_x_discrete(
    expand = expansion(add = c(0, 0))
  ) +
  scale_y_discrete(
    expand = expansion(add = c(0, 0))
  ) +
  scale_fill_viridis_c()
```

# Themes {background-color="#3c3c44"}

## Modifying Themes

- I hate that grey background!!!

```{r theme-bw}
#| output-location: fragment
p + theme_bw()
```


## Themes

- Themes are used to control the overall output of multiple aspects
    + e.g. The background grid, fonts, legend position etc
- The default theme is horrible
   + Also try `theme_classic()`, `theme_minimal()`, `theme_void()`
   
   
## Themes

- We can place the legend at the bottom
    + By default it now runs horizontally

```{r move-legend, fig.show='hide'}
p + 
  theme_bw() +
  theme(legend.position = "bottom")
```

- Or we can inset it into the plotting region

```{r inset-legend, fig.show='hide'}
p + 
  theme_bw() +
  theme(legend.position = c(1, 0), legend.justification = c(1, 0))
```

## Theme Elements

- The above elements just took standard vectors
- Some more complicated elements need helper functions
    + `element_text()` allows setting font size, font type, text alignment etc
    + `element_rect()` allows setting outline colours & fills etc
    + `element_blank()` removes the entire element
    
## Theme Elements

```{r crazy-themes, fig.show='hide'}
p + 
  ggtitle("My Transport Data") +
  theme_bw() +
  theme(
    legend.position = c(0.99, 0.01), legend.justification = c(1, 0),
    # Centre the title
    plot.title = element_text(hjust = 0.5),
    # Do dumb things to the x-axis
    axis.text.x = element_text(face = "italic", size = 16),
    # Hide the grid
    panel.grid = element_blank(),
    # Change the plot border
    panel.background = element_rect(colour = "forestgreen", linewidth = 2)
  )
```

# Exporting Graphics {background-color="#3c3c44"}

## Exporting Graphics

1. Click the `Export` button in RStudio
    + Plots can be previewed interactively and resized
2. Call `ggsave()` to export the last plot
    + The suffix will automatically set the output format

```r
ggsave(
  filename,
  plot = last_plot(),
  device = NULL,
  path = NULL,
  scale = 1,
  width = NA,
  height = NA,
  units = c("in", "cm", "mm", "px"),
  dpi = 300,
  limitsize = TRUE,
  bg = NULL,
  ...
)
```


## The Old-Fashioned Way

- Alternatively, call a graphics device directly
- By default, the graphics device is the `Plots` Pane
- If we call a different device via a function, the plot is written to a file

```{r write-to-png, eval=FALSE}
# The call to png() opens a new graphics device that writes to a png file
png(
  "transport.png",
  width = 7, height = 7, units = "in",
  res = 300
)
# Now the device is open, make the plot
p
# Close the graphics device
dev.off()
# Plots will now be produced back in the usual place
# Check to see if the file has been created
```

- The is *super-helpful* for really getting font-sizes figured out
- Additional devices are `pdf()`, `jpeg()`, `tiff()`, `svg()` etc
