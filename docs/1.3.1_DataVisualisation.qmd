---
title: "Tidying Data"
subtitle: "BODL R Training"
author: "Dr Stevie Pederson"
institute: "Black Ochre Data Labs<br>Telethon Kids Institute"
date: "2023-02-16"
date-format: long
title-slide-attributes:
    data-background-color: "#3c3c44"
    data-background-image: assets/bodl_logo_white_background.jpg
    data-background-opacity: "0.3"
    data-background-size: "90%"
editor: source
format: 
  revealjs:
    theme: [../custom.scss]
    code-line-numbers: false
    width: 1024
    height: 768
    sansfont: Times New Roman
    logo: assets/bodl_logo_white_background.jpg
---

```{r, loadPackages, echo = FALSE, include = FALSE}
knitr::opts_chunk$set(
  echo = TRUE, include = TRUE, warning = FALSE, message = FALSE, 
  fig.align = "center", results = 'hide', fig.show = "asis",
  fig.width = 6
)
```

# Data Visualisation {background-color="#3c3c44"}

## Session Setup

1. Start a new R Script called: `DataVisualisation.R`
2. Add the following two lines and execute them

```{r load-data}
library(tidyverse)
transport <- read_csv("data/transport_clean.csv")
```

. . .

- `library(tidyverse)`will load all packages from the last session
- `ggplot2` will also be loaded

## Base Plotting

R has many generic plotting functions inbuilt:

- Line/Scatter plots: `plot()`
- Histograms: `hist()`
- Boxplots: `boxplot()`

. . .

- They're usually ugly & unfriendly to use
- Can be handy for a quick & dirty plot

## Scatterplots

A simple scatter plot needs x & y co-ordinates

```{r base-plot, eval=FALSE}
plot(transport$height, transport$weight)
```

## Histograms

For a histogram, we only need values which can be *binned*

```{r base-hist, eval=FALSE}
hist(transport$height)
```

. . .

Checkout the p-values!!!

```{r plot-p-hist, fig.width=8}
not_sig <- runif(1e6) # Randomly make a million values from U(0, 1)
sig <- rbeta(1e5, 1, 50) # Add 100,000 from a skewed distribution
p <- c(not_sig, sig)
hist(p, breaks = 100, main = "P-Values") # Plot using 100 bins, i.e. every 0.01
abline(v = 0.05, col = "red") # Add our significance threshold
```


## Boxplots

A boxplot will plot the range of values across different categories

- We can use the *formula syntax* from `R`
- The `~` symbol usually means *"depends on"*
    - i.e. Plot the values of height as they depend on gender

```{r base-boxplot, eval=FALSE}
boxplot(height ~ gender, data = transport)
```

# Using `ggplot2` {background-color="#3c3c44" background-image=https://ggplot2.tidyverse.org/logo.png background-size="40%" background-opacity="0.5"}

## The package `ggplot2`

- `ggplot2` gives much more flexibility and power
    - Is part of the core `tidyverse`
- Has unique syntax and approach
- We add layers of plotting information like geometry, colours, themes etc

## The package `ggplot2`

- `ggplot2` gives much more flexibility and power
    - Is part of the core `tidyverse`
- Has unique syntax and approach
- We add layers of plotting information like geometry, colours, themes etc

- Based on the book: The Grammar of Graphics^[*Wilkinson, L* "The Grammar of Graphics", Springer New York, 2005]

![](https://m.media-amazon.com/images/I/61L6t6eXkGL._AC_UF700,800_QL80_.jpg){width="17%"}

## Calling `ggplot()`

The main function is `ggplot()` [(The package is `ggplot2`)]{.fragment .fade-in}

. . .

- In this first stage we set the plotting aesthetics using `aes()`
- Defines what is plotted on which axis, what defines the colour/shape etc.
- No data will be plotted. We get the plot area only

```{r plot-blank-area}
#| output-location: column-fragment
ggplot(transport, aes(x = weight, y = height))
```


## Adding A Geometry Layer


After defining the overall aesthetics, we

- Tell R "more is to come" by adding '`+`' at the end of the line
- Add the geometry using various `geom_*()` functions


```{r plot-transport-raw}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height)) +
  geom_point()
```


## Global Aesthetics

::: {.notes}
Don't forget to show people the help page
:::

- There are numerous aesthetics available for `geom_point()`
- Start with colouring points by the transport method

```{r plot-transport-add-colour}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height, colour = method)) +
  geom_point()
```

## Global Aesthetics

- Now set the shape of each point by the gender of our study participants

```{r plot-transport-add-shape}
#| output-location: fragment
ggplot(
  transport, 
  aes(x = weight, y = height, colour = method, shape = gender)
) +
  geom_point()
```


## Fixed Aesthetics

- Top-level aesthetics (`ggplot(aes(...))`) are passed down through layers
- Aesthetics can be set to respond to variables (i.e. columns)
- Can *also be provided as fixed values* $\implies$ specific to a layer

```{r plot-transport-add-size}
#| output-location: column-fragment
ggplot(
  transport, 
  aes(
    x = weight, y = height, 
    colour = method, shape = gender
  )
) +
  geom_point(size = 4)
```


## Aesthetics and Layers

- Variable aesthetics *can also be restricted to a layer*

```{r no-plot-transport-aes-to-geom, eval = FALSE}
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(
    aes(colour = method, shape = gender),
    size = 4
  )
```

. . .

- This will look identical to the previous plot
    + Colour & Shape will not be passed to any other layers
    + Next, we'll add more layers


## Adding Multiple Layers

- `geom_smooth()` will add a line of best fit, with standard error
- This defaults to a `loess` fit

```{r plot-transport-add-loess}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth()
```

## Adding Multiple Layers

- We can manually specify `lm` and hide the standard errors
- The *formula syntax* says `y` *depends on* `x`

```{r plot-transport-with-lm}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE)
```


## Adding Multiple Layers

- `colour = method` in the global `aes()` produces two lines

```{r plot-transport-with-lm2}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height, colour = method)) +
  geom_point(aes(shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE)
```

## Being Careful With Aesthetics

- `colour = method` in the global `aes()` produces two lines

```{r no-plot-transport-with-lm2, eval=FALSE}
ggplot(transport, aes(x = weight, y = height, colour = method)) +
  geom_point(aes(shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE)
```

- `geom_line()` has no *shape* aesthetic
- If we'd also left `shape` assigned in the initial call
    + Lines would also be grouped by gender
    + Grouped lines would still have the same type of line
    + Could add a `linetype` or `linewidth` aesthetic
        +  This looks terrible


## Adding labels

Point labels can be added using `geom_text()`

```{r plot-transport-labels, fig.width=7, fig.height=6}
#| output-location: fragment
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE) +
  geom_text(aes(label= name)) 
```

## Adding labels

- `geom_text()` can be clumsy
- `ggrepel::geom_text_repel()` is a good alternative

```{r plot-transport-label-repel, fig.height=6, fig.width=7}
#| output-location: column-fragment
# Place this line at the top of your script
library(ggrepel) 
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(
    aes(colour = method, shape = gender)
  ) +
  geom_smooth(
    method = "lm", formula = y~x, se = FALSE
  ) +
  geom_text_repel(aes(label= name)) 
```


## The package `ggplot2`: labels

Axis and legend labels can be added using `labs()`

```{r plot-transport-axis-labels, fig.width=7, fig.height=6}
#| output-location: column-fragment
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(
    aes(colour = method, shape = gender)
    ) +
  geom_smooth(
    method = "lm", formula = y~x, se = FALSE
    ) +
  geom_text_repel(aes(label= name)) +
  labs(
    x = "Weight (kg)", y = "Height (cm)", 
    shape = "Gender", colour = "Transport"
  )
```

. . .

It may be better to rename columns where possible though

# Using facets {background-color="#3c3c44"}

## Using facets

- The ability to break a plot into *facets* is an incredibly useful feature

```{r}
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE) +
  geom_text_repel(aes(label= name)) +
  labs(
    x = "Weight (kg)", y = "Height (cm)", 
    shape = "Gender", colour = "Transport"
  ) +
  facet_wrap(~gender) 
```

## Using facets

- We can set separate scales using `scales = "free"`
   + Or `"free_x"`, `"free_y"`

```{r}
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE) +
  geom_text_repel(aes(label= name)) +
  labs(
    x = "Weight (kg)", y = "Height (cm)", 
    shape = "Gender", colour = "Transport"
  ) +
  facet_wrap(~gender, scales = "free") 
```

## Using facets

- An alternative is `facet_grid()` 
- We use the `y ~ x` syntax to specify the x/y groupings

```{r}
ggplot(transport, aes(x = weight, y = height)) +
  geom_point(aes(colour = method, shape = gender)) +
  geom_smooth(method = "lm", formula = y~x, se = FALSE) +
  geom_text_repel(aes(label= name)) +
  labs(
    x = "Weight (kg)", y = "Height (cm)", 
    shape = "Gender", colour = "Transport"
  ) +
  facet_grid(method~gender, scales = "free") 
```

# Different geoms {background-color="#3c3c44"}

## Common geoms 

```{r eval=FALSE}
?geom_
```


::: {.incremental}
- `geom_boxplot()`, `geom_violin()`
- `geom_bar()`, `geom_col()`, `geom_histogram()`, `geom_errobar()`
- `geom_line()`, `geom_density()`
- `geom_rect()`, `geom_raster()`
- `geom_hline()`, `geom_vline()`, `geom_abline()`, `geom_segment()`
- `geom_text()`, `geom_label()`
:::

## `geom_boxplot()`

```{r}
ggplot(transport, aes(x = gender, y =height)) +
  geom_boxplot()
```

. . .

Adding fill or colour variables will group within the x-variable

```{r}
ggplot(transport, aes(x = gender, y =height, fill = method)) +
  geom_boxplot()
```

. . .

Can be easily combined with facets for clear visualisations

::: {.notes}
Try to switch in `geom_violin()`
:::

## `geom_histogram()`

- Histograms look horrible with the default settings


```{r, eval = FALSE}
ggplot(transport, aes(height)) +
  geom_histogram()
```

. . .

- With a few tweaks, they look pretty good

```{r}
ggplot(transport, aes(height)) +
  geom_histogram(fill = "grey70", colour = "black", binwidth = 5)
```

. . .

- To switch to a frequency instead of count

```{r}
ggplot(transport, aes(height, after_stat(density))) +
  geom_histogram(fill = "grey70", colour = "black", binwidth = 5)
```



## The package `ggplot2`: `geom_bar()`

We can summarise our data before plotting

```{r}
transport %>%
  filter(!is.na(height)) %>%
  group_by(method, gender) %>%
  summarise(mn_height = mean(height), sd_height = sd(height)) %>%
  ggplot(aes(x = method, y = mn_height, fill = method)) +
  geom_bar(stat = "identity") +
  facet_wrap(~gender) +
  guides(fill =FALSE)
```

NB: `geom_bar()` requires `stat = "identity"`

## The package `ggplot2`: `geom_errorbar()`

```{r}
transport %>%
  filter(!is.na(height)) %>%
  group_by(method, gender) %>%
  summarise(mn_height = mean(height), sd_height = sd(height)) %>%
  ggplot(aes(x = method, y = mn_height, fill = method)) +
  geom_bar(stat = "identity") +
  geom_errorbar(aes(ymin = mn_height - sd_height,
                    ymax = mn_height + sd_height),
                width = 0.6)+
  facet_wrap(~gender) +
  guides(fill =FALSE)
```

## Making pie charts

These are not intuitive so here's how:

```{r}
transport %>%
  filter(!is.na(height)) %>%
  group_by(method) %>%
  summarise(n = n()) %>%
  ggplot(aes(x = 1, y = n, fill = method)) +
  geom_bar(stat = "identity", colour = "black") +
  coord_polar("y") +
  theme_void()
```


## The package `ggplot2`: facets

__How could we get histograms for both `weight` and `height` using facets?__

- The geom to use is `geom_histogram()`

## The package `ggplot2`: facets

__How could we get histograms for both `weight` and `height` using facets?__

```{r}
transport %>%
  gather(key = "measurement", value = "value",
         ends_with("ght")) %>%
  ggplot(aes(x = value, fill = measurement)) +
  geom_histogram(bins = 10, colour = "black") +
  facet_wrap(~measurement, scales = "free_x") +
  guides(fill = FALSE)
```

## The package `ggplot2`: facets

```{r}
transport %>%
  gather(key = "measurement", value = "value",
         ends_with("ght")) %>%
  ggplot(aes(x =gender, y = value, fill = gender)) +
  geom_boxplot() +
  facet_wrap(~measurement, scales = "free_y")
```
